[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "email-parsing-mcp"
version = "1.0.0"
description = "Modern email parsing application with MCP server for standardizing .msg email content"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
keywords = ["email", "parsing", "mcp", "msg", "standardization"]

dependencies = [
    "extract-msg>=0.41.0",
    "mcp>=1.0.0",
    "python-dateutil>=2.8.2",
    "aiofiles>=23.0.0",
    "pydantic>=2.0.0",
    "fastmcp>=0.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "types-python-dateutil>=2.8.0",
]
network = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "websockets>=11.0.0",
]
ai = [
    "ollama>=0.2.1",
    "requests>=2.31.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/email-parsing-mcp"
Documentation = "https://github.com/yourusername/email-parsing-mcp#readme"
Repository = "https://github.com/yourusername/email-parsing-mcp"
Issues = "https://github.com/yourusername/email-parsing-mcp/issues"

[project.scripts]
email-parser = "email_parser.main:main"

[tool.hatch.build.targets.wheel]
packages = ["src/email_parser"]

[tool.black]
target-version = ["py312"]
line-length = 88
skip-string-normalization = true

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
